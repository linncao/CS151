"""Linn Cao Nguyen Phuong
   Oct 27, 2020
   Section A
   Lab 8: Strings, Grammars, and Trees
   CS151
"""
#version 1

import sys


def init():
    """Returns an empty L-system
    """
    return ['',[]]


def setBase(lsys, base):
    """Sets the value of the base of an L-system
    """
    lsys[0] = base


def addRule(lsys, rule):
    """Add a rule to an L-system
    """
    lsys[1].append(rule)


def getBase(lsys):
    """Returns the base of an L-system
    """
    return lsys[0]


def getRule(lsys, ruleIdx):
    """Returns a rule in an L-system
    """
    return lsys[1][ruleIdx]


def createLsystemFromFile(filename):
    """Create an L-system list by reading in the specified file
    """
    lsys = init()
    fp = open(filename, 'r')
    lines = fp.readlines()
    fp.close()
    for line in lines:
        line = line.strip()
        words = line.split(' ')
        if words[0] == 'base':
            setBase(lsys, words[1])
        elif words[0] == 'rule':
            addRule(lsys, words[1:])
    return lsys


def buildString(lsys, n):
    """Return a string generated by applying the L-system rules n times
    """
    nString = getBase(lsys)
    rule = getRule(lsys, 0)
    symbol = rule[0]
    replacement = rule[1]
    for i in range(n):
        nString = nString.replace(symbol, replacement)
    return nString


def main(argv):
    """Uses above functions to create a new string 
       from the base and rule of a text file
    """
    if len(argv) < 3:
        print('Usage: python3 lsystem.py <in_filename> <num_interations>')
        exit()
    # my_lsys = init()
    # setBase(my_lsys, 'A')
    # addRule(my_lsys, ['A', 'AB'])
    # print(my_lsys)
    # print('the base is', getBase(my_lsys))
    # print('the first rule is', getRule(my_lsys, 0))
    lsys_filename = argv[1]
    lsys = createLsystemFromFile(lsys_filename)
    print(lsys)
    num_iter = int(argv[2])
    s = buildString(lsys, num_iter)
    print(s)


if __name__ == '__main__':
    main(sys.argv)